from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime
import asyncio
import time

router = Router()

# –ê–Ω—Ç–∏—Å–ø–∞–º
last_click_time = {}
COOLDOWN = 30  # —Å–µ–∫

# –†–µ–ø–ª—ñ–∫–∏ –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ
panic_responses = [
    "01100100 01111001 01101110 01100001...",
    "–ü–æ–º–∏–ª–∫–∞! 0xA13F... ‚ö†Ô∏è",
    ">>> System overload: —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–æ.",
    "ü§ñ [BOT ERROR]: AI instability detected.",
    "–ó–∞—á–µ–∫–∞–π—Ç–µ... –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ...",
    "üß† PANIC MODE ACTIVATED... ¬Ø\\_(„ÉÑ)_/¬Ø"
]

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
def panic_generator():
    i = 0
    while True:
        yield panic_responses[i % len(panic_responses)]
        i += 1

# –Ü—Ç–µ—Ä–∞—Ü—ñ—è –∑ —Ç–µ–∫—Å—Ç–æ–º
async def iterate_with_timeout(target, timeout_seconds=3, is_callback=False):
    gen = panic_generator()
    start = datetime.now()
    while (datetime.now() - start).total_seconds() < timeout_seconds:
        text = next(gen)
        if is_callback:
            await target.message.answer(text)
        else:
            await target.answer(text)
        await asyncio.sleep(0.5)

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
def is_user_on_cooldown(user_id: int):
    now = time.time()
    if user_id in last_click_time and now - last_click_time[user_id] < COOLDOWN:
        return True, int(COOLDOWN - (now - last_click_time[user_id]))
    return False, 0

# –ö–æ–º–∞–Ω–¥–∞ /–ø–∞–Ω—ñ–∫–∞
async def panic_command(message: Message):
    user_id = message.from_user.id
    last_click_time[user_id] = time.time()
    await iterate_with_timeout(message, timeout_seconds=3, is_callback=False)

# –ö–Ω–æ–ø–∫–∞ –ø–∞–Ω—ñ–∫–∏
async def panic_button(callback: CallbackQuery):
    user_id = callback.from_user.id
    now = time.time()

    if user_id in last_click_time and now - last_click_time[user_id] < COOLDOWN:
        remaining = int(COOLDOWN - (now - last_click_time[user_id]))
        await callback.answer(f"‚è≥ –ó–∞—á–µ–∫–∞–π —â–µ {remaining} —Å–µ–∫.", show_alert=True)
        return

    last_click_time[user_id] = now
    await iterate_with_timeout(callback, timeout_seconds=3, is_callback=True)
    await callback.answer()
