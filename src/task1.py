from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from datetime import datetime
import asyncio

router = Router()

panic_responses = [
    "01100100 01111001 01101110 01100001...",
    "–ü–æ–º–∏–ª–∫–∞! 0xA13F... ‚ö†Ô∏è",
    ">>> System overload: —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –∑—É–ø–∏–Ω–µ–Ω–æ.",
    "ü§ñ [BOT ERROR]: AI instability detected.",
    "–ó–∞—á–µ–∫–∞–π—Ç–µ... –ø–µ—Ä–µ–ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –Ω–µ–π—Ä–æ–º–µ—Ä–µ–∂—ñ...",
    "üß† PANIC MODE ACTIVATED... ¬Ø\\_(„ÉÑ)_/¬Ø"
]

# ‚úÖ Generator ‚Äî infinite panic response loop
def panic_generator():
    i = 0
    while True:
        yield panic_responses[i % len(panic_responses)]
        i += 1

# ‚úÖ Timeout consumer ‚Äî send panic messages for N seconds
async def iterate_with_timeout(callback_or_message, timeout_seconds=3, is_callback=False):
    gen = panic_generator()
    start = datetime.now()
    while (datetime.now() - start).total_seconds() < timeout_seconds:
        text = next(gen)
        if is_callback:
            await callback_or_message.message.answer(text)
        else:
            await callback_or_message.answer(text)
        await asyncio.sleep(0.5)  # simulate delay

# üß® Panic command
async def panic_command(message: Message):
    await iterate_with_timeout(message, timeout_seconds=3, is_callback=False)


async def panic_button(callback: CallbackQuery):
    await iterate_with_timeout(callback, timeout_seconds=3, is_callback=True)
    await callback.answer()
